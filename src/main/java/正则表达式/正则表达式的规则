      所有正则限定符参考 : http://www.cnblogs.com/yirlin/archive/2006/04/12/373222.html
      
      匹配的意思: 正则表达式相当于一个模板,所谓的匹配就是我们的模板和字符串进行对照,看看格式是否和模板规定的一样.
      
      使用\的时候需要转译: 从而\w会写成\\w
      
     	 \ 	将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，'n' 匹配字符 "n"。'\n' 匹配一个换行符。序列 '\\' 匹配 "\" 而 "\(" 则匹配 "("。
		
		^ 	匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 '\n' 或 '\r' 之后的位置。
		
		$ 	匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 '\n' 或 '\r' 之前的位置。
		
		* 	匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
		
		+ 	匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
		
		? 	匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 或 "does" 中的"do" 。? 等价于 {0,1}。
		
		{n} 	n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
		
		{n,} 	n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
		
		{n,m} 	m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。
		
		? 	当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 "oooo"，'o+?' 将匹配单个 "o"，而 'o+' 将匹配所有 'o'。
		
		. 	匹配除 "\n" 之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用象 '[.\n]' 的模式。
		
		(pattern) 	匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 '\(' 或 '\)'。
		
		(?:pattern) 	匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 "或" 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 'industry|industries' 更简略的表达式。
		
		(?=pattern) 	正向预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，'Windows (?=95|98|NT|2000)' 能匹配 "Windows 2000" 中的 "Windows" ，但不能匹配 "Windows 3.1" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。
		
		(?!pattern) 	负向预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如'Windows (?!95|98|NT|2000)' 能匹配 "Windows 3.1" 中的 "Windows"，但不能匹配 "Windows 2000" 中的 "Windows"。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始
		
		x|y 	匹配 x 或 y。例如，'z|food' 能匹配 "z" 或 "food"。'(z|f)ood' 则匹配 "zood" 或 "food"。
		
		[xyz] 	字符集合。匹配所包含的任意一个字符。例如， '[abc]' 可以匹配 "plain" 中的 'a'。
		
		[^xyz] 	负值字符集合。匹配未包含的任意字符。例如， '[^abc]' 可以匹配 "plain" 中的'p'。
		
		[a-z] 	字符范围。匹配指定范围内的任意字符。例如，'[a-z]' 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。
		
		[^a-z] 	负值字符范围。匹配任何不在指定范围内的任意字符。例如，'[^a-z]' 可以匹配任何不在 'a' 到 'z' 范围内的任意字符。
		
		\b 	匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的 'er'。
		
		\B 	匹配非单词边界。'er\B' 能匹配 "verb" 中的 'er'，但不能匹配 "never" 中的 'er'。
		
		\cx 	匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。
		
		\d 	匹配一个数字字符。等价于 [0-9]。
		
		\D 	匹配一个非数字字符。等价于 [^0-9]。
		
		\f 	匹配一个换页符。等价于 \x0c 和 \cL。
		
		\n 	匹配一个换行符。等价于 \x0a 和 \cJ。
		
		\r 	匹配一个回车符。等价于 \x0d 和 \cM。
		
		\s 	匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。
		
		\S 	匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
		
		\t 	匹配一个制表符。等价于 \x09 和 \cI。
		
		\v 	匹配一个垂直制表符。等价于 \x0b 和 \cK。
		
		\w 	匹配包括下划线的任何单词字符。等价于'[A-Za-z0-9_]'。
		
		\W 	匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。
		
		\xn 	匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，'\x41' 匹配 "A"。'\x041' 则等价于 '\x04' & "1"。正则表达式中可以使用 ASCII 编码。.
		
		\num 	匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，'(.)\1' 匹配两个连续的相同字符。
		
		\n 	标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。
		
		\nm 	标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。
		
		\nml 	如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。
		
		\un 	匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。

    
 二 . java的正则表达式
 
　　在java.util.regex包下有两个类：Pattern和Matcher，Pattern类是正则表达式的编译形式，其实就是代表了一个正则表达式，Matcher类就是执行正则表达式匹配操作的引擎。

　　Pattern类：

　　　　compile静态方法：接受String参数，就是正则表达式了，将这个表达式编译到模式中。

　　　　matcher方法：接受String参数，创建匹配给定输入的匹配器，也即使返回一个Matcher对象。

　　　　spilt方法：以正则表达式分割字符串。

　　Matcher类：

　　　　matches方法：用来判断整个输入字符串是否匹配正则表达式模式。

　　　　lookingAt方法：用来判断该字符串的开始部分是否能够匹配模式。

　　　　find方法：尝试查找与该模式匹配的下一个子序列。

　　　　group方法：捕获之前匹配的子序列值。

三.捕获组的概念

 参考:   http://www.cnblogs.com/yakun/p/3795589.html


捕获组可以通过从左到右计算其开括号来编号，编号是从1 开始的。例如，在表达式 ((A)(B(C)))中，存在四个这样的组：

捕获组的意思其实就是正则表达式中的子表达式

正则表达式 :  ((A)(B(C)))   

1        (A)  子表达式(A)表示第1个捕获组

2        (B(C)) 子表达式(B(C))表示第2个捕获组

3       (C) 子表达式(C)表示第3个捕获组

注: 0捕获组指的是整个表达式

四.总结

   1) 一个 Pattern 是一个正则表达式经编译后的表现模式,一个 Matcher 对象是一个状态机器，它依据 Pattern 对象做为匹配模式对字符串展开匹配检查

   2) 必须理解捕获组的概念,理解group(int)的用法

   3) 各个正则限定符需要理解他们之间的区别,比较生僻的正则查字典即可

   4) 遇到别人写的正则,自己多看看别人的写法
   
   五.注意事项
   
     1) 正则表达式里面不要写空格不然匹配不到,比如
            
             //为了好看我加了好多空格,然后匹配不到
          	String patternStry = "(<table \\s* ((id=\"history\"\\s*class=\"lot-table\") | (class=\"lot-table\"\\s*id=\"history\") ) \\s* >)";
          	
          	//不加空格则能匹配的到
          	String patternStry = "(<table\\s*((id=\"history\"\\s*class=\"lot-table\")|(class=\"lot-table\"\\s*id=\"history\"))\\s*>)";
          	
      2)    	
