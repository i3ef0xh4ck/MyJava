
1.概念 :
  
       定义 : 代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用
       
      参考 : https://www.cnblogs.com/betterboyz/p/9356238.html

     目的 : 我们在不改变原对象的情况下,使用代理类可以给已有的方法前面和后面加上自己想要的业务代码,
     
      spring的 面向切面编程正是利用了这点;
      
    原理 : 根据原有的对象和处理类重新构造出一个新的类,这个类就是代理类.
                
2.使用场景 :  

      在调用某个类A的任何一个方法的时候,前后加上打印日志.  
      
      
3.java中动态代理主要有JDK和CGLIB两种方式。区别主要是jdk是代理接口，而cglib是代理类。

  JDK动态代理 :
  
	jdk的动态代理调用了Proxy.newProxyInstance(ClassLoader loader,Class<?>[] interfaces , InvocationHandler h) 方法。
	
	通过该方法生成字节码，动态的创建了一个代理类，interfaces参数是该动态类所继承的所有接口(代理类要实现该类的所有接口,这样生成出来的代理类才能具备接口的所有功能)，
	
	而继承InvocationHandler 接口的类则是实现在调用代理接口方法前后的具体逻辑. 

  cglib可以根据类来动态代理,而不需要继承接口.

       注 : 
  
   	 使用JDK动态代理可以实现任意接口的动态代理,同时可以绑定任意的处理类.spring就是利用配置先读取哪些类要进行动态代理,然后一个一个实例化放到容器里.
   	 
	 每次我们调用接口的时候,实际上调用的是代理类,这样就做到了面向切面编程.
     














                
                           

    