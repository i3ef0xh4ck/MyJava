
1.概念 :

    由来 :
                 例如在计算机内存中存储了多个完全相同或者非常相似的对象，如果这些对象的数量太多将导致系统运行代价过高，内存属于计算机的“稀缺资源”，不应该用来“随便浪费”，
   
                   那么是否存在一种技术可以用于节约内存使用空间，实现对这些相同或者相似对象的共享访问呢？答案是肯定，这种技术就是享元模式。

     参考 : https://www.cnblogs.com/lfxiao/p/6817141.html (黑白棋参考)
     
      https://www.cnblogs.com/betterboyz/p/9361793.html (单纯享元模式和复合享元模式参考)
 
 目的 ：运用共享技术有效把有限共同的部分共享起来,以节约内存.

  主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。

  何时使用：
       1)系统中有大量对象。
       2)这些对象消耗大量内存。
       3)这些对象的状态大部分可以外部化。 
       4)这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 
       5)系统不依赖于这些对象身份，这些对象是不可分辨的.(如黑棋和白棋)
       
 内部状态 : 可以共享的变量和属性.
 
 外部状态 : 不可以共享的变量和属性.比如坐标.  
 
举例  : 围棋中把围棋的颜色属性作为内部状态,这个状态是可以共享的.而坐标是不可以共享的,是外部状态,专门建一个坐标类.     
       
2.如何设计

  1) 先划分这个对象哪些部分是相同的,哪些部分是不相同的.比如围棋,颜色只有黑白两种,所以围棋的颜色部分是可以共享的.而坐标是不能共享的.
  
                把可以共享的部分抽出来专门作为一个类.而不能共享的部分则增加一个接口,让外界传入参数来进行改变.围棋的坐标通过方法来改变.
                  
3.使用场景 :    

   围棋,JDK中的String ,Integer,Double..都用到了享元模式(但看不出他们的实现原理)
                   
                      
                   
4.注意

  围棋中只有两种颜色,所以map里面只存了2个.如果是别的场景,共享的属性大于2个以上,且值是不确定的.那么在工厂的获取共享对象的方法上得做如下操作,
  
  如果对象不存在则创建一个新的共享对象,并把该对象添加进map中.
               





















                
                           

    