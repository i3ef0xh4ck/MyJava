
1.概念 :

	参考 : https://www.cnblogs.com/betterboyz/p/9356231.html

              定义 : 以对客户端透明的方式动态扩展对象的功能，是继承关系的一个替代

             目的 : 
                  装饰模式可以在不创造更多子类的情况下，将对象的功能加以扩展。装饰模式把客户端的调用委派到被装饰类。装饰模式的关键在于这种扩展完全是透明的
              （装饰模式的透明性要求客户端程序不应该将对象声明为具体构件类型或具体装饰类型，而应该全部声明为抽象构件类型），装饰模式的应用在java的I/O流中最为显著。

            为什么要使用装饰模式?明明通过继承然后重写方法就可以做到的啊?
 
                 确实可以通过重写来达到扩展同一个方法的功能的目的.但是同一个接口实现的父类是有很多,比如说我想给父类的方法前后面加上打印一句话,当然可以子类可以进行重写做到,
     
                 但是给每一个父类都重写好像有有些重复,我们可以通过组装的形式,不同的父类实例可以使用同一套前后的打印,这就是所谓的装饰.我们要理清楚装饰者和被装饰者.
                 
                他与继承的不同在于,他想复用不同父类的功能,这样比继承更加灵活.感觉工具类有点类似.        

                 
2.使用场景 :    

           装饰者模式主要应用在Java的I/O流中，如果读者对I/O流体系比较混乱的话，不妨利用装饰者模式去理理思路。OutputStream和InputStream就对应于抽象构件角色(Component)，
   
   FileInputStream和FileOutputStream就对应具体构件角色(ConcreteComponent)，FilterOutputStream和FilterInputStream就对应着装饰角色(Decorator)，
   
          而BufferedOutputStream，DataOutputStream等等就对应着具体装饰角色。






















                
                           

    