
1.概念 :

        参考 : https://www.cnblogs.com/betterboyz/p/9356458.html	

       简单理解 : 实现树状结构的设计模式.
   
       意图：将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。

        主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。

        时使用： 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。    
        
             
2.使用场景 :    

     目录结构,比如权限.

3.JDK中的使用

    在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。

4.在菜单配置的页面中,叶子结点和父节点根本就不要区分,叶子结点和父节点可以设置一个类,根据是否有子结点来区分.

     像计算机的目录结构就必须得区分,因为文件不能有有子节点.这两种场景的设计思路是一样的.反正父节点必须可以操作子节点的增加和删除.
   
    不管怎么样,操作都有可能失误而造成混乱.当子节点不支持添加孩子的时候,比如子节点添加孩子抛出不支持异常.
 
    当子节点和父节点都是同一个类的时候, 可能会出现子节点添加父亲结点的集合,造成混乱.(这种时候注意下就可以了)
    
5.两种合成模式

      安全性合成模式是指：从客户端使用合成模式上看是否更安全，如果是安全的，那么就不会有发生误操作的可能，能访问的方法都是被支持的。    (子节不包含所有接口)
 
  　透明性合成模式是指：从客户端使用合成模式上，是否需要区分到底是“树枝对象”还是“树叶对象”。如果是透明的，那就不用区分，对于客户而言，都是Compoent对象，具体的类型对于客户端而言是透明的，是无须关心的。
  
              (父节点和子节点实现同样的接口,只不过子结点的某些方法不可以访问)




















                
                           

    