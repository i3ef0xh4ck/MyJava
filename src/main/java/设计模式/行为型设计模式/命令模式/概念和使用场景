
1.概念 :

	参考 : https://www.cnblogs.com/zuoxiaolong/p/pattern13.html (要耐心仔细看)
	
	定义 : 通常“行为请求者”与“行为实现者”通常呈现一种“紧耦合,但在某些场合，比如要对行为进行“记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。
	
	                在这种情况下，如何将“行为请求者”与“行为实现者”解耦？将一组行为抽象为对象，实现二者之间的松耦合。这就是命令模式（Command Pattern）

    理解 :
    
       假设有一个类A,他有3个方法,分别是a(),b(),c(),这3个方法称之为类A的行为. 如果类B以来类A,类B把相关的请求都交给类A的行为去处理,则类B称之为行为请求者.
       
       而类A称之为行为实现者.类B依赖类A来处理请求你,称之为紧耦合.
      
       假设我们有一系列的请求,如 : 依次调用a(),c(),b(),a(),b(),b()..a()...等,我们想对这些请求进行管理,比方说按照先后请求的先后顺序,比方说还得记录每次请求的是哪个方法,
  
       或者到某个时间节点撤销某个请求,或者是某几个请求一定要成功或失败的事务.这样我们用刚才紧耦合的方式就无法实现了.我们得把这些行为抽象成一个具体的对象,就像实物一样,这个称之为命令对象.
     
       我们再写个中间类,把每个命令对象放到数组里面, 中间类可以按照自己的意愿来实现对行为进行“记录、撤销/重做、事务”等处理.这种使行为请求者和行为实现者解耦的设计模式就称之为命令模式.
           
2.使用场景 :    

    1) 希望将行为请求者和行为实现者解耦，不直接打交道。

    2) 希望可以控制执行的方法列表，方便记录，撤销/重做以及事务等功能。

    3) 期待可以将请求排队，有序执行。

    4) 希望可以将请求组合使用(事务)

3.技巧

    抽象命令类(行为实现者每有一个行为,就新增一个命令实现类)



















                
                           

    