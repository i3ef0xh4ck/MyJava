
1.概念 :

        参考 : https://www.cnblogs.com/zuoxiaolong/p/pattern23.html
        
       简单理解 : 我有一个对象结构的类,我管理的所有元素被不同的访问者使用的时候回产生不同的业务逻辑,这个时候的设计思路就是访问者设计模式.
       
       注 : 我有一个类,有一个属性是一个数组,数组里有几个稳定的元素.这种类称之为对象结构.     


     定义：
             
	              表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素类的前提下定义(扩展)作用于这些元素的新操作。
	
	              初次接触，定义会显得晦涩并且难于理解，没关系，LZ来陪着各位一起一点一点分析定义中所提到的关键点。
	
	              先来看第一句话，说是一个作用于某对象结构中的各元素的操作，这里提到了三个事物，一个是对象结构，一个是各元素，一个是操作。那么我们可以这么理解，有这么一个操作，它是作用于一些元素之上的，而这些元素属于某一个对象结构。
	
	              好了，最关键的第二句来了，它说使用了访问者模式之后，可以让我们在不改变各元素类(不增加元素)的前提下定义作用于这些元素的新操作。这里面的关键点在于前半句，即不改变各元素类的前提下，在这个前提下定义新操作是访问者模式精髓中的精髓。

     静态分派和动态分派 : 	
 
  1) 什么是静态分派?
 
                    在编译期间,就能能根据参数类型和个数来决定调用哪个方法,最典型的静态分配就是方法重载,根据参数类型和个数来决定调用哪个方法.
                    
                    在静态分派判断的时候，我们根据多个判断依据（即参数类型和个数）判断出了方法的版本，那么这个就是多分派的概念，因为我们有一个以上的考量标准，
                    
                    也可以称为宗量。所以JAVA是静态多分派的语言。              
 
  2)  动态分派  

                  对于动态分派，与静态相反，它不是在编译期确定的方法版本，而是在运行时才能确定。而动态分派最典型的应用就是多态的特性,当执行调运行时获取到抽象类指向的实际引用类型，再确定方法的版本，
                  
                  而由于此时判断的依据只是实际引用类型，只有一个判断依据，所以这就是单分派的概念，这时我们的考量标准只有一个宗量，即变量的实际引用类型。相应的，这说明JAVA是动态单分派的语言。



      访问者模式的几个特点：

     1) 访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。

     2) 访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。

     3) 访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难(新增元素)。
                 
2.使用场景 :    

     1) 数据结构稳定，作用于数据结构的操作经常变化的时候。

     2) 当一个数据结构中，一些元素类需要负责与其不相关的操作的时候，为了将这些操作分离出去，以减少这些元素类的职责时，可以使用访问者模式。

     3) 有时在对数据结构上的元素进行操作的时候，需要区分具体的类型，这时使用访问者模式可以针对不同的类型，在访问者类中定义不同的操作，从而去除掉类型判断。

3.如果不使用访问者模式?

  因为数组里面的元素每个类都有区别,数据也不一样.假设参数是数组的话,我们的访问者类需要用if..else来判断当前元素类
  
  到底是哪个类,会有一堆的if...else

  我们基本上用不上


















                
                           

    