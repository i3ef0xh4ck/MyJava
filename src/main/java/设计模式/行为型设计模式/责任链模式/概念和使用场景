
1.概念 :

   参考 : https://www.cnblogs.com/zuoxiaolong/p/pattern21.html
   
   定义 : 
   	
   		为了避免请求的发送者和接收者之间的耦合关系，使多个接受对象都有机会处理请求。将这些对象连成一条链，
   		
   		并沿着这条链传递该请求，直到有一个对象处理它为止。
   		
   什么叫发送者和接收者耦合?
   
        如果我们有一个任务,我们知道有好多个类能处理这个对象.那么我们得首先知道到底有哪些类可以处理,然后通过遍历的方式
        
        一个一个交给他们处理,直到有一个类能处理位置.如果新添加了一个处理类,我们又得知道这个处理类以及相关功能,这种情况
        
        我们称之为发送者和接收者耦合.(请求者和处理者耦合)
        
        当我们遇到这种情景的时候,就得考虑使用责任链模式了.
        
    
   责任链模式涉及到的角色如下所示：
   
	●　抽象处理者(Handler)角色：
	
		定义出一个处理请求的接口。如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。
		这个角色通常由一个Java抽象类或者Java接口实现
	
	●　具体处理者(ConcreteHandler)角色：
	
		具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。由于具体处理者持有对下家的引用，
		因此，如果需要，具体处理者可以访问下家。 

                 
2.使用场景 :    

   举例  :  
   
      现在有多个麦当劳分店,每个分店有自己的坐标,每个分店的最大送货距离是500米,当客户下达订单后,先要检查库存是否
      
      足够,还得检查是否超过最大送货距离,如果都符合,则给客户处理订单,准备送货.如果不符合,则把这个请求交给下一家麦当劳
      
      分店.然后再设计一个类,来处理排序每个分店的责任链条.






















                
                           

    