
1.概念 :
 
   参考 : https://blog.csdn.net/zhen921/article/details/82316707
   
   定义 : 
   
             用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，
    
             而且可以独立地改变它们之间的交互
             
   解析 :
   
      假设我们又3个类,分别是Computer(电脑),Mouse(鼠标),Keyboard(键盘),
      
      现在我想启动电脑的时候可以同时启动鼠标和键盘,启动鼠标的时候可以同时启动电脑和键盘,
      
      启动键盘的时候可以同时启动电脑和鼠标.任何一个器件启动,另外两个器件也要启动,这种行为称之为
      
      对象交互.我们通常的做法是在把其它两个类作为其中一个类的属性,当这个类调用open的时候,
      
      就调用其它两个类的open.或者把其它两个类的实例作为参数传到这个类的open方法中.这种设计
      
      称之为显示互相调用,他们是紧耦合的.为什么呢? 如果我这个时候想添加一个音响,那么岂不是要在类里面
      
      添加一个属性或者在方法里面添加一个参数? 这样也不符合开闭原则.如果能做到,我们能随意的添加和删除
      
      与之相关联的类,这个叫做独立改变他们的交互.我们还可以选择性的对类可以访问哪些类做控制.
      
      这就是中介者设计模式的作用.
                
          
2.使用场景 :    

   Springmvc的控制层就是中介者模式,控制层里面依赖一堆service,不同的页面可以跟不同的service产生交互,
   
   交互逻辑由控制层来控制.

3.中介者设计模式其实还是为了提出公共部分,要改就改一个地方,而不要改每个地方



















                
                           

    