
1.概念 :
 
    参考 : https://www.cnblogs.com/zuoxiaolong/p/pattern25.html
    
    定义 :  给定一个语言，定义该语言文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子
    
    简单理解 :  教你如何设计一个可以解释某种语言句子的解释器.

    终结符 : 不能继续往下推导,所以称之为终结符
  
    非终结符 : 可以继续往下推导替换成终结符,所以称之为非终结符
   
2.解释器和编译器的区别 :

   解释器 : 
   
       解释器读取程序员所写程序的源代码，解析源代码并实时解释指令.
       
       eclipse编写java代码的时候,实时提示错误就是解析器在实时解析我们的代码,并提示报错.
       
  编译器 : 
  
        编译器需要将整个程序放在一个文件中，将高层次的源代码翻译成低层次的机器语言，然后编译器将生成的机器语言放到一个文件中以便后续执行     
        
3.使用场景
 
     各种语言的语言分析器,解释器就是利用了解释器模式,我们基本不会用到      

4.假设有一上下文无关文法如下,分析这段文法代表的含义

    arithmetic -> arithmetic + number |  arithmetic - number | number

    number -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    
    分析 : 
     
       1) 上下文无关文法是2型文法, 根据2型文法的定义,式子左边只能有一个非终结符,不能有别的字符,右边可以是任意组合,
       
            但左边长度必须小于右边长度.

       2) 根据二型文法的定义,我们可以推导出
 
            在这个文法当中，其中非终结者符号是 arithmetic 和 number， 而终结者符号是 0 - 9 、-、+ 
       
       3) 跟根据文法的推导式,我们可以得到如下规则
       
               1、operator的右边必须是一个number。

               2、operator的左边必须是一个arithmetic。 

               3、arithmetic的最右边一定是一个number。

               4、由2和3，operator的左边必须是number。

               5、由4，number的右边必须是空或者operator。

               6、number只能是 0 和 1 - 9 的正整数。

               7、operator只能是 - 和 + 。
               
        4) 现在有字符串 "1+2+3+3+5+23" , "2*5" , "-2+4",求编写一个解释器,来验证这些表达式(句子)的正确性,并算出结果
        
        5)  针对这个文法，我们可以写一个解释器，去计算表达式的结果，而这个解释器就可以使用解释器模式编写。而在编写的过程中，
        
              我们需要验证以上的规则，如果违反了规则，则表达式是非法的。为了便于使用程序语言表示，我们只验证以上的后四条规则，
            
              这也是由原本的产生式推算出来的规则
              
 5.编写解释器思路
 
   1) 我们只验证后四条规则,如下             
    
          a) 由2和3，operator的左边必须是number。

          b) 由4，number的右边必须是空或者operator。

          c) number只能是 0 和 1 - 9 的正整数。

          d) operator只能是 - 和 + 。
          
    2) 根据结构图我们可以看出,针对每一条推导式我们都要设计一个非终结符表达式类(比如ArithmeticExpression),对一个终结符都要一个终结符表达式类.
    
        如果推导式是同一种类型的,则用一个就行了(比如arithmetic非终结符对应加减法表达式,只用一个类ArithmeticExpression表示).如果终结符也是同一种类型的,
        
        那么用一个类就行了(比如终结符0-9是一个类型的,则用一个终结符表达式类DigitExpression.而-和+是要给类型的,则用一个终结符表达式类OperatorExpression)
        
        终结符表达式（TerminalExpression）和非终结符表达式（NonterminalExpression）的个数都是根据文法需要而定的， 并非是一成不变。
          
    3) 根据结构图我们需要一个上下文类,可以存结果,操作数和当前的表达式.
    
    4) 抽象出一个表达式类的接口,该接口根据当前context的内容进行修改
    
    5) 编写解释器,在根据context逐个分析每个字母,看看截止到当前字母所组合的表达式是否正确,并计算结果.
    
       如果不正确则抛出异常.
       
    6) 每检测一个字符就要根据上下文来验证下语法(这就是上下文的含义和作用)
        























                
                           

    