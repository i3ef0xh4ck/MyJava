1.概念 : 

 简单理解 : 定义个类,这个类有多个方法,每个方法可以根据不同的参数返回同一种类型的不同实例,则称之为简单工厂方法模式,
   
                        通过工厂的方法就可以返回不同的实例称之为工厂方法模式.
    
　1) 建立一个工厂类，对实现了同一接口的一些类进行实例的创建。

  2) 工厂方法分为 : 普通工厂模式、多个工厂方法模式和静态工厂方法模式

	a) 普通工厂模式 : 
	 
	     普通工厂模式就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。 
	     使用if--else来根据参数判别需要实例化哪个类.
	
	b) 多个工厂方法模式
	     
	      多个工厂方法模式，是对普通工厂方法模式的改进，多个工厂方法模式就是提供多个工厂方法，分别创建对象。
	      
	      不使用if--else来判别,而是一个方法对应一个实例的创建
	      
	b) 静态工厂方法模式
	 
	       将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。
                 
2.使用场景 :                       
                           
	比如说我的代码生成器,我根据不同的使用场景来实例化不同的生成器,这个时候我的输入参数是使用场景,
	工厂根据我的使用场景进行判别,然后输出不同的生成器实例

为什么要这么做?
  
    一开始的时候,我的CodeUI类,每次新增一个场景,我就得去修改CodeUI类,新增一些判断语句,但是我不想改
    
    CodeUI类,CodeUI类只关注界面设计,下面是哪个生成器来生成与它无关.如果这个CodeUI类是另外一个开发
    
    写的话,那么使用工厂类来实例化不同的生活器就更爽了,这个开发只需要加个使用场景,其它的他都不管,根本就
    
    不需要和下面的开发人员配合着改.
    
 注 : 大部分情况下,我们使用简单工厂就可以满足需求,多个工厂方法只是简化了if-else判断,抽象工厂其实是类似于
 
       简单工厂,只不过这一次是针对工厂自己的实例化分为不同的类型.   
    