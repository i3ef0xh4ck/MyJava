
1.概念 :

不分离的情况是 : new 一个对象,然后一句一句的赋值,然后构建,OK. 如果要改,得改一堆.使用建造者模式,只需要新建一个建造者类,然后修改参数即可.
    
 意图：将一个复杂的构建(先创建头,后创建身体,然后创建脚)与其表示(给属性赋值的部分)相分离，使得同样的构建过程可以创建不同的表示。

主要解决：主要解决在软件系统中，有时候面临着"一个复杂对象"的创建工作，其通常由各个部分的子对象用一定的算法构成；

                        由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。

何时使用：一些基本部件不会变，而其组合经常变化的时候。

如何解决：将变与不变分离开
   
	
   使用该设计模式的目的 : 使得同样的构建过程可以创建不同的表示

   建造者模式（Builder Pattern） 又名生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），
   
   使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。

           
2.使用场景 :    

     当我们有一个类的时候,比如说游戏里面的角色,每个角色都有头,身体,脚.这个类称之为Role,我们给每个属性赋值的时候,得一个一个赋值,
   
     这样会写好多代码. 我会专门搞个类(Builder)来赋值,干脆合到一起,赋值完成后,把实例返回.那总的有个类来调用Builder的各个方法吧,这个类
      
     称之为导演(Director).由于Builder可能有多种类型的赋值方式,比如人和狗的头,身体,脚都不一样,那么就搞一个ManBuilder和一个DogBuilder,
   
    他们实现同样的接口,这样只需要一个导演就行了.
  
  
  好处 :
   
    1) 我们可以少些很多赋值语句
    
    2) 如果想来头羊,来头猪..只需要添加建造者就行了.
    
3.不适用建造者的情况的坏处

  如果你想有一个人,一头牛,一头猪,那么得建3个类,而他们都有相同的属性,建3个类的话就没有抽出公共部分.
  
 每个对象赋值语句一大堆,调用方法一大堆.特别的乱.
 
4.总结

  当一个复杂的对象想根据不同的值产生不同的表现形式的场合,我们可以思考下能不能使用建造者模式.  

     
     
   
            





















                
                           

    