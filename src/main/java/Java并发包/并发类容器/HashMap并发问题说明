1.并发的写HashMap有什么问题? 这些问题对读又有什么影响?

   　1) 并发的写指的是put操作和remove操作

     2) 环形链表问题

          当并发的写的时候,可能会导致两个线程同时扩容,有可能会导致Entry形成环形链表,

        遍历的时候就变成了永远的死循环,获取元素就永远去不出来,造成死机.

     3) put数据丢失问题

          当put两个不同的key,这两个key换算成hashcode是放在同一个位置,当并发put的时候,

          我们发现其中一个元素并不存在于hashMap中.
            
          案例:

           put(new Integer(3), "B") 和 put(new Integer(7), "B") 在并发的时候发现元素[7:b]丢失.

           原因是3和7在hashMap中对应的是同一个链表位置,当他们并发的时候,两个线程同事拿到这个位置的Entry,

	   把自己加在链表头部,那么先执行完的那线程就会被后执行完的那个线程覆盖,导致第一个线程的put丢失

      4) put非null元素后get出来的却是null

         这个问题和数据丢失问题有所区别,该元素依然存在hashMap中,只不过值为null.

         原因你get的时候,刚好有人在扩容,但扩容还没有完全完成.扩容有一句代码src[j] = null导致旧数组的元素为null.

         从而得要求在扩容的时候不允许get,否则get出来为null.

      5) remove 的数据未被清除，仍然存在。     

         a) 当并发remove同一个key的时候,这两个key换算成hashcode是放在同一个位置,那么后面remove的那个可能覆盖前面那个remove,

            导致其中一个元素未被删除,还留在那里.从而remove的时候必须保证只有一个线程进入


         b) 当remove的时候,刚好有线程在扩容,老数组已经拷贝好到了新数组,而你依然在老数组上remove,最后发现该元素依然存在.

            从而要求扩容的时候并发的remove
             
    6) 总结: 

         扩容的时候不允许get,不允许remove,不允许put,

2.HashMap中的modCount有何作用?

  当HashMap使用HashIterator遍历的时候,有一句代码

  if (modCount != expectedModCount) throw new ConcurrentModificationException();

  当遍历的时候如果有线程去修改可能产生问题,从而要抛异常

 
3.Hashtable中size方法为什么也要保持同步?

  因为put和remove的时候虽然已经完成了,但是还没有count++和count--,此时此刻去拿的size就是原来的值,

  我也不知道拿原来的值会产生什么后果,不准确肯定会有问题,只是还没用到而已.可能有些业务要求高要确保count

  是准确的.     
      
  4.UnsupportedOperationException异常
  
     JDK定义这个异常是为了某些适配器并没有真正的实现某个接口,想让子类重写,就抛出这个异常
     
     参考AbstractMap的186行
          